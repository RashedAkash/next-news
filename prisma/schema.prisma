// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id Int @id @default(autoincrement())
  firstName String? @db.VarChar(50)
  lastName String? @db.VarChar(50)
  email String? @unique @db.VarChar(50)
  password String? @db.VarChar(50)
  otp String? @db.VarChar(10)
  comments comments[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updateAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
}

 model comments{
id Int @id @default(autoincrement())
userId Int
postId Int
description String? @db.VarChar(300)
users users @relation(fields: [userId], references: [id],onDelete: Restrict,onUpdate: Cascade)
post news_list @relation(fields: [postId],references: [id],onDelete: Restrict,onUpdate: Cascade)

createdAt DateTime @default(now()) @db.Timestamp(0)
updateAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
}

model news_list {
  id Int @id @default(autoincrement())
  title String? @db.VarChar(100)
  short_des String? @db.VarChar(300)
  long_des String? @db.LongText()
  img1 String? @db.VarChar(300)
  img2 String? @db.VarChar(300)
  img3 String? @db.VarChar(300)
  img4 String? @db.VarChar(300)
  keywords String? @db.VarChar(300)
  types String? @db.VarChar(200)
  comment comments[]
  postId Int

  categories categories @relation(fields: [postId],references: [id],onDelete: Restrict,onUpdate: Cascade)
   createdAt DateTime @default(now()) @db.Timestamp(0)
  updateAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

}

model categories{
  id Int @id @default(autoincrement())
  name String? @db.VarChar(100) @unique

  post news_list[]

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updateAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
}

model social {
  id Int @id @default(autoincrement())
  facebook String? @db.VarChar(200)
  twitter String? @db.VarChar(200)
  youtube String? @db.VarChar(200)
  linkedin String? @db.VarChar(200)
  address String? @db.Text
  about String? @db.Text
  createdAt DateTime @default(now()) @db.Timestamp(0)
updateAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
}

model subscriber{
  id Int @id @default(autoincrement())
email String? @db.VarChar(100) @unique

  createdAt DateTime @default(now()) @db.Timestamp(0)
updateAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
}

model policies{
 id Int @id @default(autoincrement()) 
 long_des String? @db.LongText
 type String? @db.VarChar(50)

 createdAt DateTime @default(now()) @db.Timestamp(0)
updateAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
}